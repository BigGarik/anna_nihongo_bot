import logging
import os
from datetime import datetime, timedelta

from dotenv import load_dotenv

from models import User, TypeSubscription, Subscription
from services.services import notify_admins

logger = logging.getLogger('default')

load_dotenv()
location = os.getenv('LOCATION')
admin_ids = os.getenv('ADMIN_IDS')


# async def create_user(message) -> None:
    # try:
    #     user = User(
    #         id=message.from_user.id,
    #         username=message.from_user.username,
    #         first_name=message.from_user.first_name,
    #         last_name=message.from_user.last_name,
    #     )
    #     if location == 'ja-JP':
    #         user.language = 'ru'
    #     await user.save()
    #     type_subscription = await TypeSubscription.get(name='Free trial')
    #     await Subscription.create(user=user,
    #                               type_subscription=type_subscription,
    #                               date_start=datetime.now(),
    #                               date_end=datetime.now() + timedelta(days=30),
    #                               )
    #     logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.first_name} "
    #                  f"{message.from_user.last_name} —Å–æ–∑–¥–∞–Ω.")
    # except Exception as e:
    #     logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)


# async def update_or_create_user(message) -> None:
#     user = await User.get_or_none(id=message.from_user.id)
#     if user is None:
#         # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#         try:
#             user = User(
#                 id=message.from_user.id,
#                 username=message.from_user.username,
#                 first_name=message.from_user.first_name,
#                 last_name=message.from_user.last_name,
#             )
#             if location == 'ja-JP':
#                 user.language = 'ru'
#             await user.save()
#             type_subscription = await TypeSubscription.get(name='Free trial')
#             await Subscription.create(user=user,
#                                       type_subscription=type_subscription,
#                                       date_start=datetime.now(),
#                                       date_end=datetime.now() + timedelta(days=30),
#                                       )
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#             message_for_admin = (
#                 f'ü§ñ <b>–£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n'
#                 f'[id: {message.from_user.id}]\n'
#                 f'[first name: {message.from_user.first_name}]\n'
#                 f'[last name: {message.from_user.last_name}]\n'
#                 f'[username: {message.from_user.username}]\n'
#             )
#             for admin_id in admin_ids.split(','):
#                 await bot.send_message(chat_id=admin_id, text=message_for_admin)
#             logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.first_name} "
#                          f"{message.from_user.last_name} —Å–æ–∑–¥–∞–Ω.")
#         except Exception as e:
#             logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
#     else:
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è
#         try:
#             # user = await User.get(id=message.from_user.id)
#             user.username = message.from_user.username
#             user.first_name = message.from_user.first_name
#             user.last_name = message.from_user.last_name
#             await user.save()
#             logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.first_name} "
#                          f"{message.from_user.last_name} –æ–±–Ω–æ–≤–ª–µ–Ω.")
#         except Exception as e:
#             logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %s", e)


async def update_or_create_user(message):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.
    """
    user_id = message.from_user.id
    user = await User.get_or_none(id=user_id)

    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            user = User(
                id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language='ru' if location == 'ja-JP' else 'en'
            )
            await user.save()

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            type_subscription = await TypeSubscription.get(name='Free trial')
            await Subscription.create(
                user=user,
                type_subscription=type_subscription,
                date_start=datetime.now(),
                date_end=datetime.now() + timedelta(days=30)
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await notify_admins(user, '–£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id: {user_id}]: {e}")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user.username = message.from_user.username
            user.first_name = message.from_user.first_name
            user.last_name = message.from_user.last_name
            user.user_status = 'active'
            await user.save()

            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ–±–Ω–æ–≤–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [id: {user_id}]: {e}")

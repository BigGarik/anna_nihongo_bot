import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.kbd import Cancel, Start
from aiogram_dialog.widgets.text import Const

from bot_init import redis, bot
from models import User
from states import AddOriginalPhraseSG, AdminDialogSG

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

logger = logging.getLogger(__name__)

admin_dialog = Dialog(
    Window(
        Const('–ê–¥–º–∏–Ω–∫–∞'),

        Start(Const('üÜï –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É'),
              id='go_add_original_phrase_dialog',
              state=AddOriginalPhraseSG.text_phrase
              ),
        Cancel(Const('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
        state=AdminDialogSG.start,
    ),
)


@router.callback_query(F.data.startswith('confirm_access:'))
async def process_confirm_access(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    _, request_id = callback.data.split(':')
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await redis.hgetall(f"access_request:{request_id}")

    if user_data:
        user_data_decoded = {key.decode(): value.decode() for key, value in user_data.items()}
        user_id_str = user_data_decoded.get("user_id")
        if user_id_str:
            user_id = int(user_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int
            username = user_data_decoded.get("username")
            first_name = user_data_decoded.get("first_name")
            last_name = user_data_decoded.get("last_name")

            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            user = await User.filter(id=user_id).first()
            if not user:
                await User.create(id=user_id, username=username,
                                  first_name=first_name, last_name=last_name)

            await bot.send_message(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data
            await callback.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)

    # —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ Redis
    await redis.delete(f"access_request:{request_id}")
    await callback.message.delete()
    # await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)


@router.callback_query(F.data.startswith('cancel_access:'))
async def process_cancel_access(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    _, request_id = callback.data.split(':')
    await redis.delete(f"access_request:{request_id}")
    await callback.message.delete()
    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)

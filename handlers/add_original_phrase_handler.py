import base64
import os

from aiogram.enums import ContentType
from aiogram.types import CallbackQuery, Message, User
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput, MessageInput
from pydub import AudioSegment
from tortoise import fields, models
from aiogram.utils.i18n import gettext as _
from aiogram_dialog import DialogManager, Dialog, Window
from aiogram_dialog.widgets.kbd import Button, Select, Group, Cancel, Next, Back
from aiogram_dialog.widgets.text import Const, Format, Multi

from bot_init import bot
from external_services.openai_services import text_to_speech
from handlers.states import AddOriginalPhraseSG
from models import Category, AudioFile


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
async def get_categories(**kwargs):
    categories = await Category.all()
    items = [(category.name, str(category.id)) for category in categories]
    return {'categories': items}


def second_state_audio_getter(data, widget, dialog_manager: DialogManager):
    return 'audio' in dialog_manager.dialog_data


def first_state_audio_getter(data, widget, dialog_manager: DialogManager):
    return not second_state_audio_getter(data, widget, dialog_manager)


# –≠—Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def category_input(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str) -> None:
    # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ dialog_data
    dialog_manager.dialog_data['category'] = text
    await Category.create(name=text)
    await dialog_manager.next()


# –≠—Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ñ—Ä–∞–∑—ã
async def category_selection(callback: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    category = await Category.get(id=item_id)
    dialog_manager.dialog_data['category'] = category.name
    await dialog_manager.next()


async def text_input(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str) -> None:
    dialog_manager.dialog_data['text'] = text
    await dialog_manager.next()


async def translation_input(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager,
                            text: str) -> None:
    dialog_manager.dialog_data['translation'] = text
    await dialog_manager.next()


async def audio_handler(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    file_id = message.audio.file_id if message.audio else message.voice.file_id
    if message.audio:
        file_name = message.audio.file_name
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, file_name)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç .OGG —Å –∫–æ–¥–µ–∫–æ–º OPUS
        audio = AudioSegment.from_file(file_name)
        audio.export('output_audio.ogg', format='ogg', codec='libopus')

        # –ß—Ç–µ–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        with open('output_audio.ogg', 'rb') as f:
            audio_data = f.read()

        audio_data_base64 = base64.b64encode(audio_data).decode('utf-8')

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.remove(file_name)
        os.remove('output_audio.ogg')

        audio = {
            'tg_id': '',
            'audio': audio_data_base64
        }
        dialog_manager.dialog_data['audio'] = audio

    elif message.voice:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, 'output_audio.ogg')

        # –ß—Ç–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        with open('output_audio.ogg', 'rb') as f:
            audio_data = f.read()

        audio_data_base64 = base64.b64encode(audio_data).decode('utf-8')

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove('output_audio.ogg')

        audio = {
            'tg_id': file_id,
            'audio': audio_data_base64
        }
        dialog_manager.dialog_data['audio'] = audio


async def save_audio(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    if 'audio' in dialog_manager.dialog_data:
        await dialog_manager.next()
    else:
        await callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞—É–¥–∏–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


async def ai_voice_message(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    text = dialog_manager.dialog_data['text']
    audio_data = await text_to_speech(text)
    audio = {
        'tg_id': '',
        'audio': audio_data
    }
    dialog_manager.dialog_data['audio'] = audio


add_original_phrase_dialog = Dialog(
    Window(
        Const(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é:'),
        Group(
            Select(
                Format('{item[0]}'),
                id='categ',
                item_id_getter=lambda x: x[1],
                items='categories',
                on_click=category_selection,
            ),
            width=2
        ),
        TextInput(
            id='category_input',
            on_success=category_input,
        ),
        Group(
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
            Next(Const('‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), id='next'),
            width=3
        ),
        state=AddOriginalPhraseSG.category,
        getter=get_categories
    ),

    # –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç text = State()
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã:'),
        TextInput(
            id='text_input',
            on_success=text_input,
        ),
        Group(
            Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back'),
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
            Next(Const('‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), id='next'),
            width=3
        ),
        state=AddOriginalPhraseSG.text
    ),

    # translation = State()
    Window(
        Const(text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –∏–ª–∏ –∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:'),
        TextInput(
            id='translation_input',
            on_success=translation_input,
        ),
        Group(
            Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back'),
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
            Next(Const('‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), id='next'),
            width=3
        ),
        state=AddOriginalPhraseSG.translation
    ),

    # audio = State()
    Window(
        Multi(
            Const('<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ</b>'),
            Const('–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã, '
                  '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <code>–û–∑–≤—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò</code>.',
                  when=first_state_audio_getter),
            Const('–ï—Å–ª–∏ –≤—Å–µ –û–ö, –∂–º–∏ <code>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</code> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ä–∞–∑',
                  when=second_state_audio_getter),
            sep='\n\n'
        ),
        MessageInput(
            func=audio_handler,
            content_types=[ContentType.AUDIO, ContentType.VOICE],
        ),
        Button(Const('ü§ñ –û–∑–≤—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò'), id='voice_message', on_click=ai_voice_message),
        Group(
            Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back'),
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
            Button(Const('‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'), id='save', on_click=save_audio),
            # Next(Const('‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), id='next'),
            width=3
        ),
        state=AddOriginalPhraseSG.audio
    ),

    # image = State()
    Window(
        Const(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ñ—Ä–∞–∑—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:'),

        Group(
            Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back'),
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),
            Next(Const('‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), id='next'),
            width=3
        ),
        state=AddOriginalPhraseSG.image
    ),

    # comment = State()
    Window(
        Const(text='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ—Ä–∞–∑–µ:'),
        Group(
            Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back'),
            Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞'), id='button_cancel'),

            width=3
        ),
        state=AddOriginalPhraseSG.comment
    ),
)

import logging
import os

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.kbd import Button, Row, Column, Start
from aiogram_dialog.widgets.text import Format, Const, Multi
from dotenv import load_dotenv

from keyboards.inline_kb import create_inline_kb
from lexicon.lexicon_ru import LEXICON_RU
from models import User
from services.services import get_folders
from states import StartDialogSG, UserStartDialogSG, AdminDialogSG, UserTrainingSG, TextToSpeechSG, ManagementSG, SubscribeSG
from . import start_getter

load_dotenv()
admin_id = os.getenv('ADMIN_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

logger = logging.getLogger(__name__)


async def tts_button_clicked(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    # await dialog_manager.done()
    await dialog_manager.start(state=TextToSpeechSG.start)

#
# async def category_button_clicked(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
#     keyboard = create_inline_kb(1, **get_folders('original_files'))
#     await callback.message.answer(
#         text=f"{LEXICON_RU['select_category']}",
#         reply_markup=keyboard
#     )
#     await dialog_manager.done()


async def training_button_clicked(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=UserTrainingSG.start)


async def phrase_management_button_clicked(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    # user = await User.get_or_none(id=callback.from_user.id)
    # if user.subscription == 'Free':
    #     await callback.answer('–¢–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ', show_alert=True)
    # else:
    await dialog_manager.start(state=ManagementSG.start)


async def subscribe_management_button_clicked(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=SubscribeSG.start)


start_dialog = Dialog(
    Window(
        Multi(
            Const('Âàù„ÇÅ„Åæ„Åó„Å¶', when='is_jp'),
            Format('<b>–ü—Ä–∏–≤–µ—Ç, {username}!</b>'),
            Const('–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ <b>–ê–Ω–Ω—ãÊßò</b> üòÉ\n'
                  '–Ø –ø–æ–º–æ–≥–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —è–ø–æ–Ω—Å–∫–æ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ.\n\n'
                  '–•–æ—Ç–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ-—è–ø–æ–Ω—Å–∫–∏ –∫–∞–∫ —è–ø–æ–Ω—Ü—ã?\n',
                  when='is_jp'
                  ),

            Const("–ú–µ–Ω—è –∑–æ–≤—É—Ç –º–∏—Å—Ç–µ—Ä –•–∞—Ü—É, —è —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ª–µ–≥–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, "
                  "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –±–µ–≥–ª–æ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏.\n\nLet's start!\n",
                  when='is_en'
                  ),
        ),
        Column(
            Row(
                Button(
                    text=Const('üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'),
                    id='training',
                    on_click=training_button_clicked),
                Button(
                    text=Const('üîä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ (–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç)'),
                    id='tts',
                    on_click=tts_button_clicked),
                Button(
                    text=Const('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ üíé·¥†…™·¥ò'),
                    id='phrase_management',
                    on_click=phrase_management_button_clicked,
                ),
                Button(
                    text=Const('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üíé·¥†…™·¥ò'),
                    id='subscribe_management',
                    on_click=subscribe_management_button_clicked,
                    when='is_not_subscribe'
                ),
                Button(
                    text=Const('üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π üíé·¥†…™·¥ò'),
                    id='subscribe_management',
                    on_click=subscribe_management_button_clicked,
                    when='is_subscribe'
                ),
            ),
        ),
        getter=start_getter,
        state=StartDialogSG.start
    ),
)

user_start_dialog = Dialog(
    Window(
        Multi(
            Format('<b>{username}„Åï„Çì</b>„ÄÅÊó•Êú¨Ë™û„ÇíÂãâÂº∑„Åó„Åæ„Åó„Çá„ÅÜÔºÅ\n–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!',
                   when='is_jp'
                   ),
            Format("<b>{username}</b>, let's go to the next level!\n–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
                   when='is_en'
                   ),
            # Format('–ü–æ–¥–ø–∏—Å–∫–∞: <b>{subscription}</b>'),
        ),
        Column(
            Row(
                Button(
                    text=Const('üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'),
                    id='training',
                    on_click=training_button_clicked),
                Button(
                    text=Const('üîä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ (–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç)'),
                    id='tts',
                    on_click=tts_button_clicked),
                Button(
                    text=Const('üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ üíé·¥†…™·¥ò'),
                    id='phrase_management',
                    on_click=phrase_management_button_clicked,
                ),
                Button(
                    text=Const('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üíé·¥†…™·¥ò'),
                    id='subscribe_management',
                    on_click=subscribe_management_button_clicked,
                    when='is_not_subscribe'
                ),
                Button(
                    text=Const('üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π üíé·¥†…™·¥ò'),
                    id='subscribe_management',
                    on_click=subscribe_management_button_clicked,
                    when='is_subscribe'
                ),
            ),
        ),
        Row(
            Start(Const('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏(–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'),
                  id='settings',
                  state=AdminDialogSG.start
                  ),
            when='is_admin',
        ),
        getter=start_getter,
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–µ–≥–æ
        state=UserStartDialogSG.start
    ),
)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ /start
@router.message(CommandStart())
async def process_start_command(message: Message, dialog_manager: DialogManager):
    user_id = message.from_user.id
    user = await User.filter(id=user_id).first()
    if user:
        await dialog_manager.start(state=UserStartDialogSG.start, mode=StartMode.RESET_STACK)
    else:
        username = message.from_user.username or ""
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        await User.create(id=user_id, username=username,
                          first_name=first_name, last_name=last_name)
        await dialog_manager.start(state=StartDialogSG.start, mode=StartMode.RESET_STACK)


@router.message(Command(commands='cancel'))
async def process_help_command(message: Message, state: FSMContext, dialog_manager: DialogManager):
    await message.answer(text=LEXICON_RU['/cancel'])
    await dialog_manager.done()
    dialog_manager.dialog_data.clear()
    await state.clear()


@router.message(Command(commands='contact'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/contact'])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'])

# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã
# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ original_phrase
# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
# @router.callback_query(F.date.in_(BUTTONS_LIST))

# @router.callback_query(F.data == 'new_them')
# async def process_select_category(callback: CallbackQuery, state: FSMContext):
#     keyboard = create_inline_kb(1, **get_folders('original_files'))
#     await callback.message.answer(
#         text=LEXICON_RU['select_category'],
#         reply_markup=keyboard
#     )
#
#
# @router.callback_query(F.data == 'new_phrase')
# async def process_choose_phrase(callback: CallbackQuery, state: FSMContext):
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     # await state.update_data(select_category=callback.data)
#     dir_to_files = f'{user_dict[callback.from_user.id]["select_category"]}'
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
#     keyboard = create_inline_kb(1, **create_kb_file(dir_to_files))
#     await callback.message.answer(
#         text=LEXICON_RU['choose_phrase'],
#         reply_markup=keyboard
#     )
#
#
# # –ö–æ–ª–±–µ–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @router.callback_query(F.data.in_(list(get_folders('original_files').values())))
# async def process_select_category(callback: CallbackQuery, state: FSMContext):
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     await state.update_data(select_category=callback.data)
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
#     keyboard = create_inline_kb(1, **create_kb_file(callback.data))
#     await callback.message.edit_text(
#         text=LEXICON_RU['choose_phrase'],
#         reply_markup=keyboard
#     )
#
#
# # –ö–æ–ª–±–µ–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ñ—Ä–∞–∑—ã
# @router.callback_query(F.data.in_(get_all_ogg_files('original_files')))
# async def process_choose_phrase(callback: CallbackQuery, state: FSMContext):
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
#     await state.set_state(FSMInLearn.original_phrase)
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     await state.update_data(current_phrase=callback.data)
#     # –î–æ–±–∞–≤–ª—è–µ–º –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     # –ø–æ –∫–ª—é—á—É id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_dict[callback.from_user.id] = await state.get_data()
#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     # —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
#     await callback.message.delete()
#     await callback.message.answer_photo(FSInputFile(f'{user_dict[callback.from_user.id]["select_category"]}/'
#                                                     f'{callback.data.replace(".ogg", ".png")}'))
#     # –¢—É—Ç –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∞—É–¥–∏–æ
#     await callback.message.answer_voice(
#         FSInputFile(f'{user_dict[callback.from_user.id]["select_category"]}/{callback.data}'),
#         caption='–ü–æ—Å–ª—É—à–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å'
#     )
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# @router.message(F.voice, ~StateFilter(default_state))
# async def process_send_voice(message: Message, bot: Bot, state: FSMContext):
#     # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
#     user_id = message.from_user.id
#     current_phrase = user_dict[user_id]["current_phrase"]
#     current_phrase = current_phrase.rsplit('.', 1)[0]
#     file_name = f"{user_id}_{datetime.datetime.now()}_{current_phrase}"
#     file_id = message.voice.file_id
#     file = await bot.get_file(file_id)
#     file_path = file.file_path
#     file_on_disk = Path("", f"temp/{file_name}.ogg")
#     await bot.download_file(file_path, destination=file_on_disk)
#     logger.info(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–º—è {message.from_user.first_name} '
#                 f'—Ñ—Ä–∞–∑–∞ {user_dict[user_id]["current_phrase"]} '
#                 f'—Ñ–∞–π–ª - {file_on_disk}')
#     logging.debug(await state.get_state())
#
#     original_file = f'{user_dict[user_id]["select_category"]}/{user_dict[user_id]["current_phrase"]}'
#     original_script = get_tag(original_file, 'script')
#     original_translation = get_tag(original_file, 'translation')
#
#     # # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
#     # original_recognizer = SpeechRecognizer(original_file)
#     # original_text = original_recognizer.recognize_speech()
#     spoken_recognizer = SpeechRecognizer(file_on_disk, user_id)
#     spoken_text = spoken_recognizer.recognize_speech()
#     # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
#     original_audio, sample_rate = librosa.load(original_file)
#     spoken_audio, _ = librosa.load(file_on_disk, sr=sample_rate)
#     visual = PronunciationVisualizer(original_audio, spoken_audio, sample_rate, file_name)
#     await visual.preprocess_audio()
#     await visual.plot_waveform()  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
#     photo = FSInputFile(f'temp/{file_name}.png')
#     keyboard = create_inline_kb(2, **LEXICON_KB_FAST_BUTTONS_RU)
#     await message.answer_photo(photo, caption=f'–û—Ä–∏–≥–∏–Ω–∞–ª\n{original_script}\n{original_translation}\n\n'
#                                               f'–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç {spoken_text}', reply_markup=keyboard)

# os.remove(file_on_disk)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# os.remove(f'temp/{file_name}.png')

import logging
import os
import re

from aiogram import Router
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ErrorEvent, ChatMemberUpdated
from dotenv import load_dotenv

from bot_init import redis
from lexicon.lexicon_ru import LEXICON_RU
from models import User
from services.create_update_user import update_or_create_user
from services.services import notify_admins

load_dotenv()
admin_ids = os.getenv('ADMIN_IDS')
location = os.getenv('LOCATION')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

logger = logging.getLogger('default')


@router.callback_query()
async def process_phrase(callback: CallbackQuery):
    await callback.message.answer(text=callback.data)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def new_member_bot(event: ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.

    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
    –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.

    :param event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.
    """
    try:
        if event.chat.type != "private":
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç

        user = await User.get_or_none(id=event.from_user.id)
        if user:
            user.user_status = 'active'
            await user.save()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await notify_admins(user, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏')

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %s", e)

    # user_id = event.from_user.id
    # user = await User.get_or_none(id=user_id)
    # if user is None:
    #     # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #     try:
    #         user = User(
    #             id=event.from_user.id,
    #             username=event.from_user.username,
    #             first_name=event.from_user.first_name,
    #             last_name=event.from_user.last_name,
    #         )
    #         if location == 'ja-JP':
    #             user.language = 'ru'
    #         await user.save()
    #         type_subscription = await TypeSubscription.get(name='Free trial')
    #         await Subscription.create(user=user,
    #                                   type_subscription=type_subscription,
    #                                   date_start=datetime.now(),
    #                                   date_end=datetime.now() + timedelta(days=30),
    #                                   )
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    #         message_for_admin = (
    #             f'ü§ñ <b>–£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n'
    #             f'[id: {event.from_user.id}]\n'
    #             f'[first name: {event.from_user.first_name}]\n'
    #             f'[last name: {event.from_user.last_name}]\n'
    #             f'[username: {event.from_user.username}]\n'
    #         )
    #         for admin_id in admin_ids.split(','):
    #             await bot.send_message(chat_id=admin_id, text=message_for_admin)
    #         logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.username} {event.from_user.first_name} "
    #                      f"{event.from_user.last_name} —Å–æ–∑–¥–∞–Ω.")
    #     except Exception as e:
    #         logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
    # else:
    #     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è
    #     try:
    #         user = await User.get(id=event.from_user.id)
    #         user.username = event.from_user.username
    #         user.first_name = event.from_user.first_name
    #         user.last_name = event.from_user.last_name
    #         user.user_status = 'active'
    #         await user.save()
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä–Ω—É–≤—à–µ–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    #         message_for_admin = (
    #             f'ü§ñ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏</b>\n'
    #             f'[id: {event.from_user.id}]\n'
    #             f'[first name: {event.from_user.first_name}]\n'
    #             f'[last name: {event.from_user.last_name}]\n'
    #             f'[username: {event.from_user.username}]\n'
    #         )
    #         for admin_id in admin_ids.split(','):
    #             await bot.send_message(chat_id=admin_id, text=message_for_admin)
    #         logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.username} {event.from_user.first_name} "
    #                      f"{event.from_user.last_name} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    #     except Exception as e:
    #         logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %s", e)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def kick_member_bot(event: ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ (–±–æ—Ç–∞).

    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    :param event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.
    """
    try:
        user = await User.get_or_none(id=event.from_user.id)
        if user:
            user.user_status = 'blocked'
            await user.save()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await notify_admins(user, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–¥–∞–ª–∏–≤—à–µ–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %s", e)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def send_echo(message: Message, state: FSMContext):
    await message.reply(text=LEXICON_RU['error'])
    await state.clear()


@router.error()
async def error_handler(event: ErrorEvent):
    logger.critical("Critical error caused by %s", event.exception, exc_info=True)
    if "Context not found for intent id" in str(event.exception):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        intent_id_match = re.search(r'intent id: (\w+)', str(event.exception))
        if intent_id_match:
            intent_id = intent_id_match.group(1)

            # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ Redis
            async for key in redis.scan_iter("*"):
                value = await redis.get(key)
                if value and intent_id.encode() in value:
                    await redis.delete(key)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –∫–ª—é—á –∏–∑ Redis: {key}")
                    break
            else:
                logger.warning(f"–ö–ª—é—á –¥–ª—è intent id {intent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")

